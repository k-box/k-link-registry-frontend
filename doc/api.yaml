openapi: "3.0.0"
info:
  version: "2.0"
  title: "Simple API"
tags:
- name: Auth
  description: Authentication related endpoints
- name: Users
  description: User management related endpoints
- name: Invites
- name: Applications

servers:
- url: http://localhost:{port}/api/0.0
  description: Local Development server
  variables:
    port:
      default: "8001"
- url: https://slmtj.net/registry/api/0.0
  description: Deployed server

paths:
  /auth/sessions:
    post:
      tags:
        - Auth
      summary: Create a new session
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        403:
          description: "wrong credentials"
    get:
      tags:
        - Auth
      summary: "Retrieve session information"
      security:
      - BearerAuth: []
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        403:
          description: "wrong credentials"

  /auth/invites:
    post:
      tags:
      - Users
      - Invites
      summary: Invite a user to join the platform
      description: "creating an invite will send a confirmation email to the supplied address, and allow the user to create an account"
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Invite"
      responses:
        200:
          description: success
  
  /users:
    get:
      tags:
      - Users
      summary: Retrieve a list of all users
      responses:
        200:
          description: success
  /users/{userID}:
    parameters:
    - in: path
      name: userID
      schema:
        type: integer
      required: true
    get:
      tags:
      - Users
      responses:
        200:
          description: success
    put:
      tags:
      - Users
      summary: Update a user
      responses:
        200:
          description: success
    delete:
      tags:
      - Users
      summary: Remove a user
      responses:
        200:
          description: success

  /applications:
    post:
      tags:
      - Applications
      responses:
        200:
          description: success
    get:
      tags:
      - Applications
      responses:
        200:
          description: success
  /applications/{applicationID}:
    parameters:
    - in: path
      name: applicationID
      schema:
        type: integer
      required: true
    get:
      tags:
      - Applications
      responses:
        200:
          description: success
    put:
      tags:
      - Applications
      responses:
        200:
          description: success
    delete:
      tags:
      - Applications
      responses:
        200:
          description: success
  
  /permissions:
    get:
      tags:
      - Permissions
      responses:
        200:
          description: success
    post:
      tags:
      - Permissions
      responses:
        200:
          description: success
  /permissions/{permissionID}:
    parameters:
    - in: path
      name: permissionID
      schema:
        type: integer
      required: true
    put:
      tags:
      - Permissions
      responses:
        200:
          description: success
    delete:
      tags:
      - Permissions
      responses:
        200:
          description: success

components:
  schemas:
    Credentials:
      type: object
      required:
        - loginname
        - password
      properties:
        loginname:
          type: "string"
          example: user@example.com
        password:
          type: "string"
          example: hunter1

    Session:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: "#/components/schemas/User"

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        display_name:
          type: string
        rank:
          type: string
          enum:
            - owner
            - admin
            - user

    Invite:
      type: object
      required:
        - email
      properties:
        name:
          type: string
          example: Rick Sanchez
          description: ""
        email:
          type: string
          format: email
          example: "user@example.com"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: This token can be obtained via the `/auth/sessions` endpoint.